name: Twister Signed Compilation

on:
  workflow_call:
    inputs:
      app-dir:
        description: 'Base directory to search the tests'
        required: false
        type: string
        default: "."
      board-root-dir:
        description: 'Path to custom boards directory passed to --board-root option'
        required: false
        type: string
      key-file:
        description: 'Path where content of secret signing key is stored'
        required: true
        type: string
      twister-outdir:
        description: 'Twister output directory'
        required: false
        type: string
        default: "twister-out"
      tests-names:
        description: 'Space separated list of test case name to build'
        required: false
        default: ""
        type: string
      fallback-key-file:
        description: 'Key to use as fallback if signing-key is not available (action run from fork)'
        required: false
        type: string

    secrets:
      signing-key:
        description: 'Content of PEM key for which public part is stored in MCUboot firmware, and used to sign applications.'
        required: true

    outputs:
      binaries:
        description: 'Artifact name containing the binaries'
        value: ${{ jobs.compile.outputs.binaries }}

      binary-list:
        description: 'Json list of binary files produced by this job.'
        value: ${{ jobs.compile.outputs.binary-list }}

      logs:
        description: 'Artifact name containing the build logs'
        value: ${{ jobs.compile.outputs.logs }}

jobs:
  compile:
    name: Twister Signed Compilation
    runs-on: ubuntu-latest
    outputs:
      binaries: ${{ steps.jobs-outputs.outputs.binaries }}
      binary-list: ${{ steps.jobs-outputs.outputs.binary_list }}
      logs: ${{ steps.jobs-outputs.outputs.logs }}

    container:
      image: ghcr.io/siemaapplications/zephyr-arm-build:v0.0.3
      volumes:
        # When using a custom container, the path of the individuals composite action is not mounted into the target container and needs to be manually provided.
        # See https://github.com/orgs/community/discussions/53771
        - /home/runner/work/_actions/SiemaApplications/vossloh-gh-actions:/home/runner/work/_actions/SiemaApplications/vossloh-gh-actions
    steps:
      - name: Get Repository Name
        id: repo-info
        run: |
          repo_name=$(echo ${{ github.repository }} | cut -d '/' -f 2)
          echo "Repository: ${{ github.repository }}"
          echo "Repository Name: ${repo_name}"
          echo "repo_name=${repo_name}" >> $GITHUB_OUTPUT
          echo "manifest=${repo_name}/west.yml" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: ${{ steps.repo-info.outputs.repo_name }}

      - name: Cache West Module
        uses: actions/cache@v3
        id: cache
        env:
          cache-name: cache-west-modules
        with:
          path: |
            bootloader/
            modules/
            tools/
            zephyr/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles(steps.repo-info.outputs.manifest) }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: West Init
        run: |
          west init -l ${{ steps.repo-info.outputs.repo_name }}

      - name: West Update
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          west update --narrow --fetch-opt=--depth=1

      # Avoid leaking the private key on the command line
      - name: Get Signing Key
        shell: python
        env:
          MCUBOOT_KEY: ${{ secrets.signing-key }}
          KEY_FILE: ${{ inputs.key-file }}
        run: |
          import os
          key = os.environ.get('MCUBOOT_KEY')
          key_file = os.environ.get('KEY_FILE')
          with open(key_file, 'w', encoding='utf-8') as outfile:
              outfile.write("%s" % (key))

      - name: hash key
        id: signing-key-info
        run: |
          ls -l ${{ inputs.key-file }}
          echo "md5 of ${{ inputs.key-file }}"
          md5sum ${{ inputs.key-file }}
          keyfile_sz=$(ls -l ${{ inputs.key-file }} | awk '{print $5}')
          echo "keyfile_sz=${keyfile_sz}" >> $GITHUB_OUTPUT

      - name: Signing Key Fallback
        if: ${{ steps.signing-key-info.outputs.keyfile_sz == 0 }}
        run: |
          if [ -n "${{ inputs.fallback-key-file }}" ]; then
            ln -fs $(realpath "${{ inputs.fallback-key-file }}") ${{ inputs.key-file }}
            echo "::notice file=${{ inputs.fallback-key-file }}::Use signing key fallback"
          else
            echo "::warning file=${{ inputs.key-file }}::No signing key fallback"
            exit 1
          fi

      - name: debug
        run: |
          pwd
          echo "$ ls -l ${{ inputs.key-file }}"
          ls -l ${{ inputs.key-file }}

      - name: Twister args
        id: twister-args
        run: |
          if [ -n "${{ inputs.board-root-dir }}" ]; then
            echo "board_root=--board-root ${{ inputs.board-root-dir }}" >> $GITHUB_OUTPUT
          else
            echo "board_root=" >> $GITHUB_OUTPUT
          fi
          echo "testsuite_root=--testsuite-root ${{ inputs.app-dir }}" >> $GITHUB_OUTPUT
          echo "outdir=--outdir ${{ inputs.twister-outdir }}" >> $GITHUB_OUTPUT
          testargs=""
          if [ -n "${{ inputs.tests-names }}" ]; then
            for t in ${{ inputs.tests-names }}; do
              testargs="${testargs} --test ${t}"
            done
          fi
          echo "testargs=${testargs}" >> $GITHUB_OUTPUT
          echo "testargs: ${testargs}"

      - name: Twister Run
        run: |
          ./zephyr/scripts/twister ${{ steps.twister-args.outputs.board_root }} \
            --integration \
            ${{ steps.twister-args.outputs.outdir }} \
            ${{ steps.twister-args.outputs.testsuite_root }} \
            ${{ steps.twister-args.outputs.testargs }}

      - name: Compute Job Outputs
        id: jobs-outputs
        run: |
          cd ${{ inputs.twister-outdir }}
          binaries="${{ inputs.twister-outdir }}-binaries"
          logs="${{ inputs.twister-outdir }}-build-logs"
          binary_list="$(find . -name 'zephyr.bin' | jq -R -s -c 'split("\n") | map(select(length > 0))')"
          echo "binaries=${binaries}" | tee -a $GITHUB_OUTPUT
          echo "binary_list=${binary_list}" | tee -a $GITHUB_OUTPUT
          echo "logs=${logs}" | tee -a $GITHUB_OUTPUT

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          retention-days: 7
          name: ${{ steps.jobs-outputs.outputs.logs }}
          path: |
            ${{ inputs.twister-outdir }}/**/build.log

      - name: Upload Binaries
        uses: actions/upload-artifact@v3
        with:
          # We don't care of the binaries after the run
          retention-days: 1
          name: ${{ steps.jobs-outputs.outputs.binaries }}
          path: |
            ${{ inputs.twister-outdir }}/**/*.bin
            ${{ inputs.twister-outdir }}/**/*.elf
            ${{ inputs.twister-outdir }}/**/*.hex
            !${{ inputs.twister-outdir }}/**/zephyr_pre*.elf
            !${{ inputs.twister-outdir }}/**/isrList.bin

      - name: Check Twister Results
        uses: SiemaApplications/vossloh-gh-actions/twister/results-analysis@fix_matrix_output
        with:
          twister-result-file: ${{ inputs.twister-outdir }}/twister.json
